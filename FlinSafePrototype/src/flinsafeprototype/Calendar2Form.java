/*
Adapted from:
https://docs.oracle.com/javase/8/javafx/interoperability-tutorial/swing-fx-interoperability.htm
https://www.javacodegeeks.com/2016/05/javafx-8-datepicker-swing-application.html
https://docs.oracle.com/javase/8/javafx/user-interface-tutorial/date-picker.htm

 */
package flinsafeprototype;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Calendar;
import java.util.GregorianCalendar;

import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javafx.application.Platform;
import javafx.embed.swing.JFXPanel;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.layout.VBox;
import javafx.scene.layout.HBox;
import javafx.scene.layout.GridPane;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Tooltip;
import javafx.scene.control.DatePicker;
import javafx.scene.control.DateCell;
import javafx.scene.control.Label;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.util.Callback;
import javafx.util.StringConverter;
import javafx.util.converter.LocalDateStringConverter;

import javax.swing.JFrame;
import javax.swing.WindowConstants;
import javax.swing.SwingUtilities;
import java.awt.Point;
import java.time.format.DateTimeFormatter;
import java.time.LocalDate;

/**
 *
 * @author dkear
 */
public class Calendar2Form extends javax.swing.JPanel {

    private static JFrame frame;
    private static DatePicker inPicker;
    private static DatePicker fmPicker;
    private static DatePicker toPicker;
    private static final String pattern = "dd-MMM-yy";

    enum DateParameterType {
        FROM_DATE, TO_DATE
    };

    private void initAndShowGUI() {
        setBorder(BorderFactory.createEtchedBorder());

        setLayout(new BorderLayout());
        JFXPanel fxPanel = new JFXPanel();
        // Container c = frame.getContentPane();
        // c.setLayout(new FlowLayout());
        // and beside it, the current month.
        //c.add(fxPanel);
        initFX(fxPanel);
        add(fxPanel);
        setSize(400, 300);
        revalidate();
        repaint();

    }

    private static void initFX(JFXPanel fxPanel) {
        Scene scene = createScene();
        fxPanel.setScene(scene);
    }

    /**
     * Creates new form Calendar2Form
     */
    public Calendar2Form() {
        super();
        initAndShowGUI();
    }

    public LocalDate getSelectedDate(){
        return inPicker.getValue();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
    }// </editor-fold>//GEN-END:initComponents

    public static void main(String... args) {

        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                //initAndShowGUI();
            }
        });

    }

    private static Scene createScene() {

        GridPane grid = new GridPane();
        grid.setAlignment(Pos.CENTER);
        grid.setHgap(10);

        inPicker = new DatePicker();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(pattern);
        StringConverter<LocalDate> converter
                = new LocalDateStringConverter(formatter, null);
        final Callback<DatePicker, DateCell> dayCellFactory
                = new Callback<DatePicker, DateCell>() {
            @Override
            public DateCell call(final DatePicker datePicker) {
                return new DateCell() {
                    @Override
                    public void updateItem(LocalDate item, boolean empty) {
                        super.updateItem(item, empty);
                        Calendar calendar = new GregorianCalendar();
                        LocalDate today = LocalDate.of((Calendar.YEAR), (Calendar.MONTH), (Calendar.DAY_OF_MONTH));
                        if (item.isAfter(LocalDate.now().plusDays(3))) {
                            this.setDisable(true);
                            setStyle("-fx-background-color: #ffc0cb;");
                        }
                        if (item.isBefore(LocalDate.now())) {
                            this.setDisable(true);
                            setStyle("-fx-background-color: #ffc0cb;");
                        }
                    }
                };
            }
        };
        inPicker.setDayCellFactory(dayCellFactory);
        grid.add(inPicker, 1, 0);

        // Vbox and scene
        VBox vbox = new VBox(20);
        vbox.setPadding(new Insets(15, 15, 15, 15));
        vbox.getChildren().addAll(grid);

        return new Scene(vbox);
    }

    /* 
	 * Returns a Callback with DateCell as return value for the DatePicker. The
	 * DateCell determines that the DatePicker date values are disabled. This applies
	 * for the three date picker widgets.
	 * This allows the following validation:
	 * * The selected date cannot be greater than today.
	 * * From-date cannot be greater than to-date.
     */
    private static Callback<DatePicker, DateCell> getCustomDateCellFactory(DateParameterType dateParamType) {

        Callback<DatePicker, DateCell> dayCellFactory
                = new Callback<DatePicker, DateCell>() {

            @Override
            public DateCell call(DatePicker datePicker) {

                return new DateCell() {

                    @Override
                    public void updateItem(LocalDate select, boolean empty) {

                        super.updateItem(select, empty);

                        // Date cannot be after today.
                        // This applies for all the date pickers.
                        if (select.isAfter(LocalDate.now())) {

                            setDisable(true);
                            return;
                        }

                        // From-date cannot be greater than to-date.
                        if ((dateParamType == DateParameterType.FROM_DATE)
                                && (select.isAfter(toPicker.getValue()))) {

                            setDisable(true);
                        }

                        // To-date cannot be less than from-date,
                        // and cannot be greater than today.
                        if (dateParamType == DateParameterType.TO_DATE) {

                            if ((select.isBefore(fmPicker.getValue()))
                                    || (select.isAfter(LocalDate.now()))) {

                                setDisable(true);
                            }
                        }
                    }
                };
            }
        };

        return dayCellFactory;
    }

    // Validate button's action listener routine.
    private static void buttonActionListenerRoutine() {

        if (inPicker.getValue() == null) {

            showAlert(AlertType.ERROR,
                    "The input date must be in dd-MMM-yy format (for example, 02-Mar-16).");
            inPicker.requestFocus();
            return;
        }

        if (validDate(fmPicker.getValue(), toPicker.getValue(), inPicker.getValue())) {

            Alert alert = new Alert(AlertType.INFORMATION);
            alert.setTitle("Valid date");
            alert.setHeaderText("Success!");
            alert.setContentText("The input date is within the selected date range.");
            alert.showAndWait();
        } else {
            showAlert(AlertType.ERROR,
                    "The input date is not within the selected date range!");
        }
    }

    private static void showAlert(AlertType alertType, String content) {

        Alert alert = new Alert(alertType);
        alert.setTitle("Invalid date");
        alert.setContentText(content);
        alert.showAndWait();
    }

    /*
	 * Returns true if the given input date is between the start and
	 * end dates (including).
     */
    private static boolean validDate(LocalDate start, LocalDate end, LocalDate input) {

        if ((input.isEqual(start)) || (input.isEqual(end))) {

            return true;
        } else if ((input.isAfter(start)) && (input.isBefore(end))) {

            return true;
        } else {
            return false;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
